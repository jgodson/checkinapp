#!/usr/bin/env node

// If not in production, require file for environment variables
if (!process.env.MONGO_URI) {
	require('../env.js');
}

// Make variables avaiable to other functions
var server;
var debug;
var port;
var http;
var app;


// MongoDB dependencies
const MongoClient = require('mongodb').MongoClient;
const URI = process.env.MONGO_URI;

// Conenct to DB first, then do everything else
connectToDB(URI, function (err, db) {
	// Make db app global variable
	global.DB = db;
	
	// Other dependencies
	app = require('../app');
	debug = require('debug')('fstcheckinpage:server');
	http = require('http');
	require('../db');

	// Get port from environment and store in Express.
	port = normalizePort(process.env.PORT || '3000');
	app.set('port', port);

	// Create Server
	server = http.createServer(app);
	
	// Listen on provided port, on all network interfaces.
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
});

 // Normalize a port into a number, string, or false.

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function connectToDB(URI, callback) {
	MongoClient.connect(URI, function (err, db) {
		if (err) throw err;
		console.log('Database connection successful!');
		callback(null, db)
	});
}